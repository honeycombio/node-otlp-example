"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableBaseMetric = void 0;
const BoundInstrument_1 = require("./BoundInstrument");
const Metric_1 = require("./Metric");
const ObservableResult_1 = require("./ObservableResult");
const NOOP_CALLBACK = () => { };
/**
 * This is a SDK implementation of Base Observer Metric.
 * All observables should extend this class
 */
class ObservableBaseMetric extends Metric_1.Metric {
    constructor(name, options, _processor, resource, metricKind, instrumentationLibrary, callback) {
        super(name, options, metricKind, resource, instrumentationLibrary);
        this._processor = _processor;
        this._callback = callback || NOOP_CALLBACK;
    }
    _makeInstrument(attributes) {
        return new BoundInstrument_1.BoundObservable(attributes, this._disabled, this._valueType, this._processor.aggregatorFor(this._descriptor));
    }
    async getMetricRecord() {
        const observableResult = new ObservableResult_1.ObservableResult();
        await this._callback(observableResult);
        this._processResults(observableResult);
        return super.getMetricRecord();
    }
    _processResults(observableResult) {
        observableResult.values.forEach((value, attributes) => {
            const instrument = this.bind(attributes);
            instrument.update(value);
        });
    }
    observation(value) {
        return {
            value,
            observable: this,
        };
    }
}
exports.ObservableBaseMetric = ObservableBaseMetric;
//# sourceMappingURL=ObservableBaseMetric.js.map