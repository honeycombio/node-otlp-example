import * as api from '@opentelemetry/api-metrics';
import { Aggregator } from './export/types';
/**
 * This class represent the base to BoundInstrument, which is responsible for generating
 * the TimeSeries.
 */
export declare class BaseBoundInstrument {
    private readonly _disabled;
    private readonly _valueType;
    private readonly _aggregator;
    protected _attributes: api.Attributes;
    constructor(attributes: api.Attributes, _disabled: boolean, _valueType: api.ValueType, _aggregator: Aggregator);
    update(value: number): void;
    getAttributes(): api.Attributes;
    getAggregator(): Aggregator;
}
/**
 * BoundCounter allows the SDK to observe/record a single metric event. The
 * value of single instrument in the `Counter` associated with specified Attributes.
 */
export declare class BoundCounter extends BaseBoundInstrument implements api.Counter {
    constructor(attributes: api.Attributes, disabled: boolean, valueType: api.ValueType, aggregator: Aggregator);
    add(value: number): void;
}
/**
 * BoundUpDownCounter allows the SDK to observe/record a single metric event.
 * The value of single instrument in the `UpDownCounter` associated with
 * specified Attributes.
 */
export declare class BoundUpDownCounter extends BaseBoundInstrument implements api.UpDownCounter {
    constructor(attributes: api.Attributes, disabled: boolean, valueType: api.ValueType, aggregator: Aggregator);
    add(value: number): void;
}
/**
 * BoundMeasure is an implementation of the {@link BoundMeasure} interface.
 */
export declare class BoundHistogram extends BaseBoundInstrument implements api.Histogram {
    constructor(attributes: api.Attributes, disabled: boolean, valueType: api.ValueType, aggregator: Aggregator);
    record(value: number): void;
}
/**
 * BoundObservable is an implementation of the {@link BoundObservable} interface.
 */
export declare class BoundObservable extends BaseBoundInstrument {
    constructor(attributes: api.Attributes, disabled: boolean, valueType: api.ValueType, aggregator: Aggregator);
}
//# sourceMappingURL=BoundInstrument.d.ts.map