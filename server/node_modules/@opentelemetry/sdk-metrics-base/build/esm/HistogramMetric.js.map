{"version":3,"file":"HistogramMetric.js","sourceRoot":"","sources":["../../src/HistogramMetric.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;AAKH,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,wDAAwD;AACxD;IACU,mCAAsB;IAE9B,yBACE,IAAY,EACZ,OAA0B,EACT,UAAqB,EACtC,QAAkB,EAClB,sBAA8C;QALhD,YAOE,kBACE,IAAI,EACJ,OAAO,EACP,UAAU,CAAC,SAAS,EACpB,QAAQ,EACR,sBAAsB,CACvB,SACF;QAXkB,gBAAU,GAAV,UAAU,CAAW;;IAWxC,CAAC;IAES,yCAAe,GAAzB,UAA0B,UAA0B;QAClD,OAAO,IAAI,cAAc,CACvB,UAAU,EACV,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAChD,CAAC;IACJ,CAAC;IAED,gCAAM,GAAN,UAAO,KAAa,EAAE,UAA+B;QAA/B,2BAAA,EAAA,eAA+B;QACnD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IACH,sBAAC;AAAD,CAAC,AA/BD,CACU,MAAM,GA8Bf","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { BoundHistogram } from './BoundInstrument';\nimport { Processor } from './export/Processor';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n\n/** This is a SDK implementation of Histogram Metric. */\nexport class HistogramMetric\n  extends Metric<BoundHistogram>\n  implements api.Histogram {\n  constructor(\n    name: string,\n    options: api.MetricOptions,\n    private readonly _processor: Processor,\n    resource: Resource,\n    instrumentationLibrary: InstrumentationLibrary\n  ) {\n    super(\n      name,\n      options,\n      MetricKind.HISTOGRAM,\n      resource,\n      instrumentationLibrary\n    );\n  }\n\n  protected _makeInstrument(attributes: api.Attributes): BoundHistogram {\n    return new BoundHistogram(\n      attributes,\n      this._disabled,\n      this._valueType,\n      this._processor.aggregatorFor(this._descriptor)\n    );\n  }\n\n  record(value: number, attributes: api.Attributes = {}): void {\n    this.bind(attributes).record(value);\n  }\n}\n"]}