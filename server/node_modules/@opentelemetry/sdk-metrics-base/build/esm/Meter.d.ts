import * as api from '@opentelemetry/api-metrics';
import { InstrumentationLibrary } from '@opentelemetry/core';
import { Processor } from './export/Processor';
import { MeterConfig } from './types';
/**
 * Meter is an implementation of the {@link Meter} interface.
 */
export declare class Meter implements api.Meter {
    private readonly _metrics;
    private readonly _processor;
    private readonly _resource;
    private readonly _instrumentationLibrary;
    private readonly _controller;
    private _isShutdown;
    private _shuttingDownPromise;
    /**
     * Constructs a new Meter instance.
     */
    constructor(instrumentationLibrary: InstrumentationLibrary, config?: MeterConfig);
    /**
     * Creates and returns a new {@link Histogram}.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createHistogram(name: string, options?: api.MetricOptions): api.Histogram;
    /**
     * Creates a new counter metric. Generally, this kind of metric when the
     * value is a quantity, the sum is of primary interest, and the event count
     * and value distribution are not of primary interest.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createCounter(name: string, options?: api.MetricOptions): api.Counter;
    /**
     * Creates a new `UpDownCounter` metric. UpDownCounter is a synchronous
     * instrument and very similar to Counter except that Add(increment)
     * supports negative increments. It is generally useful for capturing changes
     * in an amount of resources used, or any quantity that rises and falls
     * during a request.
     *
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createUpDownCounter(name: string, options?: api.MetricOptions): api.UpDownCounter;
    /**
     * Creates a new `ObservableGauge` metric.
     * @param name the name of the metric.
     * @param [options] the metric options.
     * @param [callback] the observable gauge callback
     */
    createObservableGauge(name: string, options?: api.MetricOptions, callback?: (observableResult: api.ObservableResult) => unknown): api.ObservableGauge;
    createObservableCounter(name: string, options?: api.MetricOptions, callback?: (observableResult: api.ObservableResult) => unknown): api.ObservableCounter;
    /**
     * Creates a new `ObservableUpDownCounter` metric.
     * @param name the name of the metric.
     * @param [options] the metric options.
     * @param [callback] the observable gauge callback
     */
    createObservableUpDownCounter(name: string, options?: api.MetricOptions, callback?: (observableResult: api.ObservableResult) => unknown): api.ObservableUpDownCounter;
    /**
     * Collects all the metrics created with this `Meter` for export.
     *
     * Utilizes the processor to create checkpoints of the current values in
     * each aggregator belonging to the metrics that were created with this
     * meter instance.
     */
    collect(): Promise<void>;
    getProcessor(): Processor;
    shutdown(): Promise<void>;
    /**
     * Registers metric to register.
     * @param name The name of the metric.
     * @param metric The metric to register.
     */
    private _registerMetric;
    /**
     * Ensure a metric name conforms to the following rules:
     *
     * 1. They are non-empty strings
     *
     * 2. The first character must be non-numeric, non-space, non-punctuation
     *
     * 3. Subsequent characters must be belong to the alphanumeric characters,
     *    '_', '.', and '-'.
     *
     * Names are case insensitive
     *
     * @param name Name of metric to be created
     */
    private _isValidName;
}
//# sourceMappingURL=Meter.d.ts.map