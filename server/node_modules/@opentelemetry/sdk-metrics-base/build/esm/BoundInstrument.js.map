{"version":3,"file":"BoundInstrument.js","sourceRoot":"","sources":["../../src/BoundInstrument.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api-metrics';\nimport { Aggregator } from './export/types';\n\n/**\n * This class represent the base to BoundInstrument, which is responsible for generating\n * the TimeSeries.\n */\nexport class BaseBoundInstrument {\n  protected _attributes: api.Attributes;\n\n  constructor(\n    attributes: api.Attributes,\n    private readonly _disabled: boolean,\n    private readonly _valueType: api.ValueType,\n    private readonly _aggregator: Aggregator\n  ) {\n    this._attributes = attributes;\n  }\n\n  update(value: number): void {\n    if (this._disabled) return;\n    if (typeof value !== 'number') {\n      diag.error(\n        `Metric cannot accept a non-number value for ${Object.values(\n          this._attributes\n        )}.`\n      );\n      return;\n    }\n\n    if (this._valueType === api.ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${Object.values(\n          this._attributes\n        )}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n    }\n\n    this._aggregator.update(value);\n  }\n\n  getAttributes(): api.Attributes {\n    return this._attributes;\n  }\n\n  getAggregator(): Aggregator {\n    return this._aggregator;\n  }\n}\n\n/**\n * BoundCounter allows the SDK to observe/record a single metric event. The\n * value of single instrument in the `Counter` associated with specified Attributes.\n */\nexport class BoundCounter\n  extends BaseBoundInstrument\n  implements api.Counter {\n  constructor(\n    attributes: api.Attributes,\n    disabled: boolean,\n    valueType: api.ValueType,\n    aggregator: Aggregator\n  ) {\n    super(attributes, disabled, valueType, aggregator);\n  }\n\n  add(value: number): void {\n    if (value < 0) {\n      diag.error(`Counter cannot descend for ${Object.values(this._attributes)}`);\n      return;\n    }\n\n    this.update(value);\n  }\n}\n\n/**\n * BoundUpDownCounter allows the SDK to observe/record a single metric event.\n * The value of single instrument in the `UpDownCounter` associated with\n * specified Attributes.\n */\nexport class BoundUpDownCounter\n  extends BaseBoundInstrument\n  implements api.UpDownCounter {\n  constructor(\n    attributes: api.Attributes,\n    disabled: boolean,\n    valueType: api.ValueType,\n    aggregator: Aggregator\n  ) {\n    super(attributes, disabled, valueType, aggregator);\n  }\n\n  add(value: number): void {\n    this.update(value);\n  }\n}\n\n/**\n * BoundMeasure is an implementation of the {@link BoundMeasure} interface.\n */\nexport class BoundHistogram\n  extends BaseBoundInstrument\n  implements api.Histogram {\n  constructor(\n    attributes: api.Attributes,\n    disabled: boolean,\n    valueType: api.ValueType,\n    aggregator: Aggregator\n  ) {\n    super(attributes, disabled, valueType, aggregator);\n  }\n\n  record(value: number): void {\n    this.update(value);\n  }\n}\n\n/**\n * BoundObservable is an implementation of the {@link BoundObservable} interface.\n */\nexport class BoundObservable extends BaseBoundInstrument {\n  constructor(\n    attributes: api.Attributes,\n    disabled: boolean,\n    valueType: api.ValueType,\n    aggregator: Aggregator\n  ) {\n    super(attributes, disabled, valueType, aggregator);\n  }\n}\n"]}