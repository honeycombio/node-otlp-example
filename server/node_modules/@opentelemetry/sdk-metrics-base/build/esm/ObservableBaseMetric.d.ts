import * as api from '@opentelemetry/api-metrics';
import { Observation } from '@opentelemetry/api-metrics';
import { InstrumentationLibrary } from '@opentelemetry/core';
import { Resource } from '@opentelemetry/resources';
import { BoundObservable } from './BoundInstrument';
import { Processor } from './export/Processor';
import { MetricKind, MetricRecord } from './export/types';
import { Metric } from './Metric';
import { ObservableResult } from './ObservableResult';
/**
 * This is a SDK implementation of Base Observer Metric.
 * All observables should extend this class
 */
export declare abstract class ObservableBaseMetric extends Metric<BoundObservable> implements api.ObservableBase {
    private readonly _processor;
    protected _callback: (observableResult: api.ObservableResult) => unknown;
    constructor(name: string, options: api.MetricOptions, _processor: Processor, resource: Resource, metricKind: MetricKind, instrumentationLibrary: InstrumentationLibrary, callback?: (observableResult: api.ObservableResult) => unknown);
    protected _makeInstrument(attributes: api.Attributes): BoundObservable;
    getMetricRecord(): Promise<MetricRecord[]>;
    protected _processResults(observableResult: ObservableResult): void;
    observation(value: number): Observation;
}
//# sourceMappingURL=ObservableBaseMetric.d.ts.map